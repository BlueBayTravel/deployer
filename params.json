{"name":"Deployer","tagline":"PHP application deployer","body":"# Introduction\r\n\r\nDeployer is a application for managing the deployment of PHP applications\r\n\r\n**Current Build Status**\r\n\r\n[![Build Status](http://ci.rebelinblue.com/build-status/image/3?branch=master)](http://ci.rebelinblue.com/build-status/view/3?branch=master)\r\n[![Code Climate](https://codeclimate.com/github/REBELinBLUE/deployer/badges/gpa.svg)](https://codeclimate.com/github/REBELinBLUE/deployer)\r\n[![Test Coverage](https://codeclimate.com/github/REBELinBLUE/deployer/badges/coverage.svg)](https://codeclimate.com/github/REBELinBLUE/deployer)\r\n\r\n## What it does:\r\n* Deploys applications to multiple servers accessible via SSH\r\n* Clones your projects git repository\r\n* Installs composer dependencies\r\n* Runs arbitrary commands\r\n* Gracefully handles failure in any of these steps\r\n* Keeps a number of previous deployments\r\n\r\n## What it doesn't do:\r\n* Provision VMs\r\n* Install system packages\r\n* Configure the web server, database or other services\r\n\r\n# Why?\r\n\r\nDeployer was heavily inspired by [Envoyer.io](https://envoyer.io), if you want a reliable deployment system I suggest you give Envoyer a try.\r\n\r\nDeployer came about as I needed a deployment system for deploying updates for a PHP application to a large number of clients. Although Envoyer was almost perfect it was missing 2 key things I needed\r\n\r\nFirstly, I was unable to use a hosted service as it would not be able to connect to the servers I needed to deploy to without a lot of network configuration changes.\r\n\r\nSecondly, the code for the application I was deploying was hosted on a Gitlab server, and Envoyer only supports Github & Bitbucket.\r\n\r\nFor these reasons I decided to make a clone of Envoyer which suited my needs, at the same time using it as an excuse to learn Laravel 5.\r\n\r\n# Installation\r\n\r\n#### Prerequisites \r\n\r\n* PHP >= 5.4\r\n* PHP Mcrypt extension\r\n* PHP SQLite extension\r\n* PHP OpenSSL extension\r\n* PHP Mbstring extension\r\n* PHP Tokenizer extension\r\n* PHP Json extension (normally built in)\r\n* beanstalkd\r\n* composer\r\n* bower\r\n* node\r\n* gulp\r\n\r\n**Clone the repository**\r\n\r\n    $ git clone http://repository.url/repo.git\r\n\r\n**Setup config**\r\n\r\n    $ cp .env.example .env\r\n    $ editor .env\r\n\r\nAn example of the config\r\n\r\n    APP_ENV=production\r\n    APP_URL=http://deploy.app\r\n    APP_DEBUG=false\r\n    APP_KEY=cJKwSTJFF75DK29ecw72ZRrkS6D0tqHy\r\n    QUEUE_DRIVER=beanstalkd\r\n\r\n**Install dependencies**\r\n\r\n    $ composer install\r\n    $ npm install\r\n    $ bower install\r\n\r\n**Setup the database**\r\n\r\n    $ touch storage/database.sqlite\r\n    $ php artisan migrate:install\r\n    $ php artisan migrate\r\n\r\n**Compile the assets**\r\n\r\n    $ gulp --production\r\n    $ gulp copy # This is needed to get the fonts needed by bootstrap in the correct place\r\n\r\n**Start the queue listener**\r\n\r\n    $ php artisan queue:listen --queue=default,deploy,connections,notify --timeout=0 --tries=1\r\n\r\nFinally visit the site to login, the default login is `admin@example.com` with the password `password`\r\n\r\n\r\n# Development\r\n\r\nThe code is written to follow PSR-2 standards, this can be tested using PHP_CodeSniffer\r\n\r\n    $ phpcs --standard=PSR2 app\r\n\r\nCode style can be checked with\r\n\r\n    $ phpmd app text design,unusedcode,naming\r\n\r\nPHP Docblocks can be checked with\r\n\r\n    $ phpdoccheck --directory=\"app\"\r\n","google":"UA-10186986-3","note":"Don't delete this file! It's used internally to help with page regeneration."}